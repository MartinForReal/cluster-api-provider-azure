apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni-windows: ${CLUSTER_NAME}-calico
    containerd-logger: enabled
    csi-proxy: enabled
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  topology:
    class: ci-default
    controlPlane:
      replicas: ${CONTROL_PLANE_MACHINE_COUNT}
    variables:
    - name: subscriptionID
      value: ${AZURE_SUBSCRIPTION_ID}
    - name: controlPlaneMachineType
      value: ${AZURE_CONTROL_PLANE_MACHINE_TYPE:-""}
    - name: workerMachineType
      value: ${AZURE_NODE_MACHINE_TYPE:-""}
    - name: workerMachineTypeWin
      value: ${AZURE_NODE_MACHINE_TYPE:-""}
    - name: sshPublicKey
      value: ${AZURE_SSH_PUBLIC_KEY_B64:-""}
    - name: buildProvenance
      value: ${BUILD_PROVENANCE:-""}
    - name: timestamp
      value: ${TIMESTAMP:-""}
    - name: jobName
      value: ${JOB_NAME:-""}
    - name: clusterIdentityRef
      value: ${CLUSTER_IDENTITY_NAME}
    - name: location
      value: ${AZURE_LOCATION}
    - name: k8sFeatureGates
      value: ${K8S_FEATURE_GATES:-""}
    - name: logLevel
      value: "4"
    version: ${KUBERNETES_VERSION}
    workers:
      machineDeployments:
      - class: ci-default-worker
        name: md-0
        replicas: ${WORKER_MACHINE_COUNT}
      - class: ci-default-worker-win
        name: md-win
        replicas: ${WINDOWS_WORKER_MACHINE_COUNT:-0}
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: ${CLUSTER_NAME}-calico
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      cni-windows: ${CLUSTER_NAME}-calico
  resources:
  - kind: ConfigMap
    name: cni-${CLUSTER_NAME}-calico-windows
  strategy: ApplyOnce
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: csi-proxy
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      csi-proxy: enabled
  resources:
  - kind: ConfigMap
    name: csi-proxy-addon
  strategy: ApplyOnce
---
apiVersion: v1
data:
  proxy: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: kube-proxy
      name: kube-proxy-windows
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: kube-proxy-windows
      template:
        metadata:
          labels:
            k8s-app: kube-proxy-windows
        spec:
          serviceAccountName: kube-proxy
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\system"
          hostNetwork: true
          containers:
          - image: sigwindowstools/kube-proxy:${KUBERNETES_VERSION/+/_}-calico-hostprocess
            args: ["$env:CONTAINER_SANDBOX_MOUNT_POINT/kube-proxy/start.ps1"]
            workingDir: "$env:CONTAINER_SANDBOX_MOUNT_POINT/kube-proxy/"
            name: kube-proxy
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KUBEPROXY_PATH
              valueFrom:
                configMapKeyRef:
                  name: windows-kubeproxy-ci
                  key: KUBEPROXY_PATH
                  optional: true
            volumeMounts:
            - mountPath: /var/lib/kube-proxy
              name: kube-proxy
          nodeSelector:
            kubernetes.io/os: windows
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - operator: Exists
          volumes:
          - configMap:
              name: kube-proxy
            name: kube-proxy
      updateStrategy:
        type: RollingUpdate
  windows-cni: |
    # strictAffinity required for windows
    apiVersion: crd.projectcalico.org/v1
    kind: IPAMConfig
    metadata:
      name: default
    spec:
      autoAllocateBlocks: true
      strictAffinity: true
    ---
    kind: ConfigMap
    apiVersion: v1
    metadata:
      name: calico-static-rules
      namespace: calico-system
      labels:
        tier: node
        app: calico
    data:
      static-rules.json: |
        {
          "Provider": "azure",
          "Version": "0.1",
          "Rules": [
            {
              "Name": "EndpointPolicy",
              "Rule": {
                  "Id": "wireserver",
                  "Type": "ACL",
                  "Protocol": 6,
                  "Action": "Block",
                  "Direction": "Out",
                  "RemoteAddresses": "168.63.129.16/32",
                  "RemotePorts": "80",
                  "Priority": 200,
                  "RuleType": "Switch"
                }
              }
          ]
        }
    ---
    kind: ConfigMap
    apiVersion: v1
    metadata:
      name: calico-config-windows
      namespace: calico-system
      labels:
        tier: node
        app: calico
    data:
      veth_mtu: "1350"

      cni_network_config: |
        {
          "name": "Calico",
          "cniVersion": "0.3.1",
          "plugins": [
            {
              "windows_use_single_network": true,
              "type": "calico",
              "mode": "vxlan",
              "nodename": "__KUBERNETES_NODE_NAME__",
              "nodename_file_optional": true,
              "log_file_path": "c:/cni.log",
              "log_level": "debug",

              "vxlan_mac_prefix": "0E-2A",
              "vxlan_vni": 4096,
              "mtu": __CNI_MTU__,
              "policy": {
                "type": "k8s"
              },

              "log_level": "info",

              "capabilities": {"dns": true},
              "DNS":  {
                "Search":  [
                  "svc.cluster.local"
                ]
              },

              "datastore_type": "kubernetes",

              "kubernetes": {
                "kubeconfig": "__KUBECONFIG_FILEPATH__"
              },

              "ipam": {
                "type": "calico-ipam",
                "subnet": "usePodCidr"
              },

              "policies":  [
                {
                  "Name":  "EndpointPolicy",
                  "Value":  {
                    "Type":  "OutBoundNAT",
                    "ExceptionList":  [
                      "__K8S_SERVICE_CIDR__"
                    ]
                  }
                },
                {
                  "Name":  "EndpointPolicy",
                  "Value":  {
                    "Type":  "SDNROUTE",
                    "DestinationPrefix":  "__K8S_SERVICE_CIDR__",
                    "NeedEncap":  true
                  }
                }
              ]
            }
          ]

        }
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: calico-node-windows
      labels:
        tier: node
        app: calico
      namespace: calico-system
    spec:
      selector:
        matchLabels:
          app: calico
      template:
        metadata:
          labels:
            tier: node
            app: calico
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/os
                        operator: In
                        values:
                          - windows
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                          - amd64
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\system"
          hostNetwork: true
          serviceAccountName: calico-node
          tolerations:
          - operator: Exists
            effect: NoSchedule
            # Mark the pod as a critical add-on for rescheduling.
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoExecute
            operator: Exists
          initContainers:
            # This container installs the CNI binaries
            # and CNI network config file on each node.
            - name: install-cni
              image: sigwindowstools/calico-install:v3.24.5-hostprocess
              args: ["$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/install.ps1"]
              imagePullPolicy: Always
              env:
                # Name of the CNI config file to create.
                - name: CNI_CONF_NAME
                  value: "10-calico.conflist"
                # The CNI network config to install on each node.
                - name: CNI_NETWORK_CONFIG
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config-windows
                      key: cni_network_config
                # Set the hostname based on the k8s node name.
                - name: KUBERNETES_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                # CNI MTU Config variable
                - name: CNI_MTU
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config-windows
                      key: veth_mtu
                # Prevents the container from sleeping forever.
                - name: SLEEP
                  value: "false"
                - name: K8S_SERVICE_CIDR
                  value: "10.96.0.0/12"
              volumeMounts:
                - mountPath: /host/opt/cni/bin
                  name: cni-bin-dir
                - mountPath: /host/etc/cni/net.d
                  name: cni-net-dir
                - name: kubeadm-config
                  mountPath: /etc/kubeadm-config/
              securityContext:
                windowsOptions:
                  hostProcess: true
                  runAsUserName: "NT AUTHORITY\\system"
          containers:
          - name: calico-node-startup
            image: sigwindowstools/calico-node:v3.24.5-hostprocess
            args: ["$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/node-service.ps1"]
            workingDir: "$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/"
            imagePullPolicy: Always
            volumeMounts:
            - name: calico-config-windows
              mountPath: /etc/kube-calico-windows/
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: CNI_IPAM_TYPE
              value: "calico-ipam"
            - name: CALICO_NETWORKING_BACKEND
              value: "vxlan"
            - name: KUBECONFIG
              value: "C:/etc/cni/net.d/calico-kubeconfig"
            - name: VXLAN_VNI
              value: "4096"
          - name: calico-node-felix
            image: sigwindowstools/calico-node:v3.24.5-hostprocess
            args: ["$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/felix-service.ps1"]
            imagePullPolicy: Always
            workingDir: "$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/"
            volumeMounts:
            - name: calico-config-windows
              mountPath: /etc/kube-calico-windows/
            - name: calico-static-rules
              mountPath: /calico/static-rules.json
              subPath: static-rules.json
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: VXLAN_VNI
              value: "4096"
            - name: KUBECONFIG
              value: "C:/etc/cni/net.d/calico-kubeconfig"
          volumes:
          - name: calico-config-windows
            configMap:
              name: calico-config-windows
          - name: calico-static-rules
            configMap:
              name: calico-static-rules
          # Used to install CNI.
          - name: cni-bin-dir
            hostPath:
              path: /opt/cni/bin
          - name: cni-net-dir
            hostPath:
              path: /etc/cni/net.d
          - name: kubeadm-config
            configMap:
              name: kubeadm-config
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: ipamconfigs.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPAMConfig
        listKind: IPAMConfigList
        plural: ipamconfigs
        singular: ipamconfig
      preserveUnknownFields: false
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: IPAMConfigSpec contains the specification for an IPAMConfig
                  resource.
                properties:
                  autoAllocateBlocks:
                    type: boolean
                  maxBlocksPerHost:
                    description: MaxBlocksPerHost, if non-zero, is the max number of blocks
                      that can be affine to each host.
                    maximum: 2147483647
                    minimum: 0
                    type: integer
                  strictAffinity:
                    type: boolean
                required:
                - autoAllocateBlocks
                - strictAffinity
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: cni-${CLUSTER_NAME}-calico-windows
  namespace: default
---
apiVersion: v1
data:
  csi-proxy: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: csi-proxy
      name: csi-proxy
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: csi-proxy
      template:
        metadata:
          labels:
            k8s-app: csi-proxy
        spec:
          nodeSelector:
            "kubernetes.io/os": windows
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\SYSTEM"
          hostNetwork: true
          containers:
            - name: csi-proxy
              image: ghcr.io/kubernetes-sigs/sig-windows/csi-proxy:v1.0.2
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: csi-proxy-addon
  namespace: default
